package org.optaplanner.examples.cloudbalancing.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;

import com.abs.domain.AmbulanceBooking;
import com.abs.domain.AmbulanceCompany;
//import org.kie.api.runtime;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "isCardiac"
    when
        $ac : AmbulanceCompany(cardiac==true)
    then
        scoreHolder.addHardConstraintMatch(kcontext,-1);
end

/*rule "requiredCpuPowerTotal"
    when
        $computer : CloudComputer($cpuPower : cpuPower)
        $requiredCpuPowerTotal : Number(intValue > $cpuPower) from accumulate(
            CloudProcess(
                computer == $computer,
                $requiredCpuPower : requiredCpuPower),
            sum($requiredCpuPower)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $cpuPower - $requiredCpuPowerTotal.intValue());
end

rule "requiredMemoryTotal"
    when
        $computer : CloudComputer($memory : memory)
        $requiredMemoryTotal : Number(intValue > $memory) from accumulate(
            CloudProcess(
                computer == $computer,
                $requiredMemory : requiredMemory),
            sum($requiredMemory)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $memory - $requiredMemoryTotal.intValue());
end

rule "requiredNetworkBandwidthTotal"
    when
        $computer : CloudComputer($networkBandwidth : networkBandwidth)
        $requiredNetworkBandwidthTotal : Number(intValue > $networkBandwidth) from accumulate(
            CloudProcess(
                computer == $computer,
                $requiredNetworkBandwidth : requiredNetworkBandwidth),
            sum($requiredNetworkBandwidth)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $networkBandwidth - $requiredNetworkBandwidthTotal.intValue());
end*/

// ############################################################################
// Soft constraints
// ############################################################################

rule "lowestPrice"
    when
        $ac : AmbulanceCompany($cost : costScore)
    //    exists AmbulanceBooking(AmbulanceCompany = $ac)
    then

        scoreHolder.addSoftConstraintMatch(kcontext,-$cost);
end

/*
rule "computerCost"
    when
        $computer : CloudComputer($cost : cost)
        exists CloudProcess(computer == $computer)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
end
*/
